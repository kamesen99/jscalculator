{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","last","total","sub","operator","error","handleClickDigit","bind","handleClickSymbol","handleClickDecimal","handleChange","equals","clear","e","ans","eval","this","setState","target","value","dec","symbol","endsWithNegativeSign","testRegex","testStr","concat","test","id","className","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.1d139ae6.chunk.js","sourcesContent":["import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      last: \"\",\n      total: \"0\",\n      sub: \"\",\n      operator: \"\",\n      error: \"Message\"\n    }\n    this.handleClickDigit = this.handleClickDigit.bind(this);\n    this.handleClickSymbol = this.handleClickSymbol.bind(this);\n    this.handleClickDecimal = this.handleClickDecimal.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.equals = this.equals.bind(this);\n    this.clear = this.clear.bind(this);\n  }\n  handleChange(e) {}\n  \n  equals() {\n    let ans = eval(this.state.total);\n    this.setState({\n      total: ans\n    })\n  }\n  \n  clear() {\n    //console.log(\"Clear\")\n    this.setState({\n      last: this.state.total,\n      total: \"0\",\n      sub: \"\",\n      error: \"Message\",\n      operator: \"\"\n    })\n  }\n  \n  handleClickDecimal(e){\n    var dec = true;\n    this.handleClickDigit(e, dec);\n  }\n  \n  handleClickSymbol(e){\n    //console.log(\"clicked a symbol\");\n    var symbol =  true;\n    var dec = false;\n    this.setState({\n      operator: e.target.value,\n      sub: \"\"\n    })\n    //console.log(this.state.operator)\n    this.handleClickDigit(e, dec, symbol);\n  }\n  \n  //Simplify this by passing a prop which tells the function what type of character I'm passing?\n  handleClickDigit(e, dec, symbol) {\n    \n    const endsWithOperator = /[*+/-]$/;\n    const endsWithNegativeSign = /.*[*/+]-$/;\n      \n    //console.log(e.target.value)\n    if (this.state.total === \"0\") {\n      this.setState({\n        last: e.target.value,\n        total: e.target.value,\n        sub: e.target.value\n      })\n    } \n    \n    else if (dec) { //If decimal, check for previous dec\n      //console.log(\"DEC = true\")\n      let testRegex = /\\.[^.]*\\./;\n      let testStr = this.state.sub.concat(e.target.value);\n      \n      if(testRegex.test(testStr)) {\n        this.setState({\n          error: \"Two decimal characters not allowed\",\n          operator: \".\"\n        })\n      } else if (!testRegex.test(testStr)) {\n        //console.log(\"passed double DEC test\")\n        this.setState({\n          total: this.state.total.concat(e.target.value),\n          sub: this.state.sub.concat(e.target.value),\n          last: e.target.value\n        })\n      } \n    } \n    \n    else if (dec === false && symbol === false) {\n        //console.log(\"DEC = false\")\n        //if the previous char was not an operator\n        if (this.state.operator === \"\") {\n          //console.log(\"operator is blank\")\n          this.setState({\n            last: e.target.value,\n            total: this.state.total.concat(e.target.value),\n            operator: e.target.value,\n            sub: \"\"\n          })\n        } \n        \n      else {\n        //console.log(\"hit exception\")\n        //console.log(e.target.value)\n        //console.log(this.state.total.slice(-1))\n        //console.log(isOperator.test(this.state.total.slice(-1)))\n        // this.setState({\n        //     last: e.target.value,\n        //     total: this.state.total.concat(e.target.value),\n        //     sub: this.state.sub.concat(e.target.value)\n        //   })\n      }\n    }\n    \n    else if (symbol === true && dec === false) {\n      //const isOperator = /[/+‑\\*]/\n      //console.log(\"symbol = true\")\n      //console.log(e.target.value)\n      //console.log(this.state.total.slice(-1))\n      //console.log(isOperator.test(this.state.total.slice(-1)))\n      // was last character an operator?\n      \n      if (!endsWithOperator.test(this.state.total)) {\n        //console.log(\"does not end with operator\")\n        //console.log(this.state.total)\n        this.setState({\n          last: this.state.total,\n          total: this.state.total + e.target.value\n        });  \n        //\n      } else if (!endsWithNegativeSign.test(this.state.total)) {\n        //console.log(this.state.total)\n        //console.log(e.target.value)\n        //console.log(this.state.total + e.target.value)\n        //console.log(endsWithNegativeSign.test(this.state.total + e.target.value))\n        //console.log(\"does not end with negative sign\")\n        //console.log(endsWithNegativeSign.test(this.state.total + e.target.value))\n        this.setState({\n          total: (endsWithNegativeSign.test(this.state.total + e.target.value)\n            ? this.state.total : this.state.last) + e.target.value\n        });\n      } else if (e.target.value !== '‑') {\n        //console.log(\"input is not (-)\")\n        this.setState({\n          total: this.state.last + e.target.value\n        });\n      } else {\n        //console.log(\"hit exception\")\n      }\n    }\n    \n    //just a digit being passed\n    else {\n      //console.log(\"hit exception, just a digit\")\n      //console.log(this.state.sub)\n        this.setState({\n          last: e.target.value,\n          total: this.state.total.concat(e.target.value)\n          //sub: this.state.sub.concat(e.target.value)\n        })\n    }\n    //console.log(this.state)\n  }\n\n  render() {\n    //console.log(this.state.operator);\n    return(\n      <div id=\"calculator\">\n        <h3 className=\"text-center\" id=\"display\">{this.state.total}</h3>\n        <div id=\"button-container\">\n        <div className=\"row\">\n          <button className=\"btn btn-primary col-xs-3\" value=\"1\" id=\"one\" onClick={this.handleClickDigit}>1</button>\n          <button className=\"btn btn-primary col-xs-3\" value=\"2\" id=\"two\" onClick={this.handleClickDigit}>2</button>\n          <button className=\"btn btn-primary col-xs-3\" value=\"3\" id=\"three\" onClick={this.handleClickDigit}>3</button>\n          <button className=\"btn btn-info col-xs-3\" id=\"add\" value=\"+\" onClick={this.handleClickSymbol}>+</button>\n        </div>\n        <div className=\"row\">\n          <button className=\"btn btn-primary col-xs-3\" value=\"4\" id=\"four\" onClick={this.handleClickDigit}>4</button>\n          <button className=\"btn btn-primary col-xs-3\" value=\"5\" id=\"five\" onClick={this.handleClickDigit}>5</button>\n          <button className=\"btn btn-primary col-xs-3\" value=\"6\" id=\"six\" onClick={this.handleClickDigit}>6</button>\n          <button className=\"btn btn-info col-xs-3\" id=\"subtract\" value=\"-\" onClick={this.handleClickSymbol}>-</button>\n        </div>\n        <div className=\"row\">\n          <button className=\"btn btn-primary col-xs-3\" value=\"7\" id=\"seven\" onClick={this.handleClickDigit}>7</button>\n          <button className=\"btn btn-primary col-xs-3\" value=\"8\" id=\"eight\" onClick={this.handleClickDigit}>8</button>\n          <button className=\"btn btn-primary col-xs-3\" value=\"9\" id=\"nine\" onClick={this.handleClickDigit}>9</button>\n          <button className=\"btn btn-info col-xs-3\" id=\"multiply\" value=\"*\" onClick={this.handleClickSymbol}>*</button>\n        </div>\n        <div className=\"row\">\n          <button className=\"btn btn-info col-xs-3\" id=\"decimal\" value=\".\" onClick={this.handleClickDecimal}>.</button>\n          <button className=\"btn btn-primary col-xs-3\" value=\"0\" id=\"zero\" onClick={this.handleClickDigit}>0</button>\n          <button className=\"btn btn-secondary col-xs-3\" id=\"equals\" onClick={this.equals}>=</button>\n          <button className=\"btn btn-info col-xs-3\" id=\"divide\" value=\"/\" onClick={this.handleClickSymbol}>/</button>\n        </div>\n        <div className=\"row\">\n          <button className=\"btn col-xs-3 blank\"></button>\n          <button className=\"btn col-xs-3 blank\"></button>\n          <button className=\"btn col-xs-3 blank\"></button>\n          <button className=\"btn btn-danger col-xs-3\" id=\"clear\" onClick={this.clear}>C</button>\n        </div>\n        </div>\n        <h5 className=\"text-left\">Status: {this.state.error}</h5>\n        <div id=\"test\">\n          \n        </div>\n      </div>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}